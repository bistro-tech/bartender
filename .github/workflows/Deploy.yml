name: Deploy

on:
    push:
        branches:
            - main
        paths:
            - src/**
            - .github/workflows/**
            - Containerfile
            - package.json
            - tsconfig.json
    workflow_dispatch:

env:
    SERVER_ID: '687640485984206871'
    CLIENT_ID: '1264611076054712380'
    BUMP_CHANNEL_ID: '1272453433172955180'
    BUMP_NOTIFICATION_ROLE_ID: '1272223052176031806'
    VPS_USER: 'bistro-tech'
    HOME_DIR: '/home/bistro-tech'
    IMG_NAME: '${{ github.event.repository.name }}'
    IMG_ARCH: arm64
    TZ: Europe/Paris
    MODERATION_CHANNEL_ID: '1272323179464884345'
    DB_FOLDER: '/home/bistro-tech/dbs'
    DB_FILENAME: 'bartender.db'

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: deployment
        steps:
            - uses: actions/checkout@v4.1.7
            - name: Install QEMU
              run: sudo apt-get install -y qemu-user-static
            - name: Save the current date
              id: date
              run: echo "DATE=$(TZ=${{ env.TZ }} date '+%F-%Hh%Mm%Ss')" >> $GITHUB_OUTPUT
            - name: Build container image
              run: |
                  podman build --arch arm64 -t ${{ env.IMG_NAME }} .
                  podman save ${{ env.IMG_NAME }} --format oci-archive -o ${{ env.IMG_NAME }}.tar
            - name: Upload Docker image to VPS using ssh
              uses: easingthemes/ssh-deploy@v5.1.0
              with:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
                  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
                  REMOTE_USER: ${{ env.VPS_USER }}
                  REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
                  SOURCE: ${{ env.IMG_NAME }}.tar
                  TARGET: ${{ env.HOME_DIR }}/bartender-builds/${{ env.IMG_NAME }}-${{ steps.date.outputs.DATE }}.tar
                  SCRIPT_BEFORE: |
                      # make sure builds folder exists
                      mkdir ${{ env.HOME_DIR }}/bartender-builds

                      # ensure linger is on
                      loginctl enable-linger $USER
                      if ! systemctl --user is-enabled podman-restart.service > /dev/null; then
                          systemctl --user enable podman-restart.service
                          systemctl --user start podman-restart.service
                      fi

                      # clean up old containers & images if container already here
                      if podman ps -a --filter "name=${{ env.IMG_NAME }}" --format '{{.Names}}' | grep -q "^${{ env.IMG_NAME }}$"; then
                          podman stop ${{ env.IMG_NAME }}
                          podman rm ${{ env.IMG_NAME }}
                          podman rmi ${{ env.IMG_NAME }}
                      fi

                      # ensure needed folder exists
                      mkdir -p dbs/backups
                      chmod -R 777 dbs

                      # make a backup of the current DB just in case
                      cp ${{ env.DB_FOLDER }}/${{ env.DB_FILENAME }} ${{ env.DB_FOLDER }}/backups/${{ env.DB_FILENAME }}-${{ steps.date.outputs.DATE }}
                  SCRIPT_AFTER: |
                      podman load -i ${{ env.HOME_DIR }}/bartender-builds/${{ env.IMG_NAME }}-${{ steps.date.outputs.DATE }}.tar
                      podman run \
                          --detach \
                          --tz=${{ env.TZ }} \
                          --name ${{ env.IMG_NAME }} \
                          --volume "${{ env.DB_FOLDER }}:${{ env.DB_FOLDER }}" \
                          --env "TOKEN=${{ secrets.TOKEN }}" \
                          --env "SERVER_ID=${{ env.SERVER_ID }}" \
                          --env "CLIENT_ID=${{ env.CLIENT_ID }}" \
                          --env "WEBHOOK_LOG_URL=${{ secrets.WEBHOOK_LOG_URL }}" \
                          --env "BUMP_CHANNEL_ID=${{ env.BUMP_CHANNEL_ID }}" \
                          --env "BUMP_NOTIFICATION_ROLE_ID=${{ env.BUMP_NOTIFICATION_ROLE_ID }}" \
                          --env "MODERATION_CHANNEL_ID=${{ env.MODERATION_CHANNEL_ID }}" \
                          --env "DATABASE_FILENAME=${{ env.DB_FOLDER }}/${{ env.DB_FILENAME }}" \
                          --restart always \
                          ${{ env.IMG_NAME }}
